import pandas as pd
import numpy as np
import csv
import pywt
from scipy.signal import butter, filtfilt, resample
from sklearn.preprocessing import MinMaxScaler
from imblearn.over_sampling import SMOTE

# Load the dataset
data = pd.read_csv("PTB_ECG database.csv")

# Handle missing values
data.dropna(inplace=True)
z
# Function to apply a high-pass filter to remove baseline wander
def high_pass_filter(data, cutoff=0.5, fs=1000, order=2):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='high', analog=False)
    return filtfilt(b, a, data)

# Function to resample the data (downsampling to 250 Hz)
def resample_signal(data, target_rate=250, original_rate=1000):
    num_samples = int(len(data) * target_rate / original_rate)
    return resample(data, num_samples)

# Function to apply Discrete Wavelet Transform
def apply_dwt(data, wavelet='db3'):
    coeffs = pywt.dwt(data, wavelet)
    return np.hstack(coeffs)

# Apply high-pass filter to remove baseline wander
data_filtered = np.apply_along_axis(high_pass_filter, 1, data)

# Resample the data (downsampling to 250 Hz)
data_resampled = np.apply_along_axis(resample_signal, 1, data_filtered)

# Apply min-max normalization
scaler = MinMaxScaler()
data_normalized = scaler.fit_transform(data_resampled)

# Apply DWT to extract features from the whole dataset
data_dwt = np.apply_along_axis(apply_dwt, 1, data_normalized)

# Split the data into features and target
X = data_dwt[:, :-1]  # Features
Y = data_dwt[:, -1]   # Target

# Categorize the continuous target into discrete classes (Normal:0, Abnormal:1)
threshold = np.median(Y)  # Adjust based on dataset characteristics
Y_discrete = (Y > threshold).astype(int)

# Apply SMOTE to balance the dataset
smote = SMOTE(random_state=1)
X_smote, Y_smote = smote.fit_resample(X, Y_discrete) # type: ignore

# Combine the DWT and the target column for saving the final dataset
result = np.hstack((X_smote, Y_smote.reshape(-1, 1))) # type: ignore

# Create the output CSV file with the processed data
filename = "PTB_ECG Dataset.csv"
with open(filename, "w", newline='') as outfile:
    out_csv = csv.writer(outfile)
    
    # Write CSV header with feature names and target
    header = [f'feature_{i}' for i in range(X_smote.shape[1])] + ['target']
    out_csv.writerow(header)
    
    # Write the transformed data rows
    for row in result:
        out_csv.writerow(row)

# Print the output CSV file
print("The 'PTB_ECG Dataset.csv' saved successfully")
